<!DOCTYPE html>
<html>
<head>
  <title>{% block title %}Library Admin{% endblock %}</title>
  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f1f5f9;
      color: #1e293b;
    }

    header {
      background-color: #1e293b;
      color: white;
      padding: 20px;
      position: sticky;
      top: 0;
      z-index: 100;
    }

    header h1 {
      margin: 0;
      font-size: 24px;
    }

    nav {
      margin-top: 10px;
      display: flex;
      gap: 20px;
    }

    nav a {
      color: #cbd5e1;
      text-decoration: none;
      font-weight: 500;
      transition: color 0.3s ease;
    }

    nav a:hover {
      color: #ffffff;
    }

    main {
      max-width: 1000px;
      margin: 40px auto;
      padding: 20px;
      background: white;
      border-radius: 16px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    }

    footer {
      text-align: center;
      margin-top: 60px;
      padding: 20px;
      color: #64748b;
    }

    @media (max-width: 768px) {
      nav {
        flex-wrap: wrap;
        gap: 10px;
      }

      main {
        margin: 20px;
        padding: 15px;
      }
    }
  </style>
</head>
<body>
  <header>
    <h1>Library Admin Panel</h1>
    <nav>
      <a href="{% url 'admin_home' %}">Dashboard</a>
      <a href="{% url 'add_book' %}">Add Book</a>
      <a href="{% url 'manage_books' %}">Manage Books</a>
         {% if user.is_authenticated %}
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'admin:logout' %}">Logout</a>
                </li>
            </ul>
            {% endif %}
    </nav>
  </header>

  <main>
    {% block content %}{% endblock %}
  </main>

  <footer>
    <p>&copy; 2025 Library Admin</p>
  </footer>
</body>
</html>


this menu page 
{% extends "base.html" %}
{% load static %}
{% block title %}Menu – SUSHI NARUTO MOMOS AND MORE{% endblock %}

{% block content %}
<style>
    /* Fade-in animation */
    .fade-in {
        opacity: 0;
        transform: translateY(20px);
        animation: fadeInUp 0.6s ease-out forwards;
    }

    @keyframes fadeInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    h1,
    h2 {
        font-family: 'Arial', sans-serif;
        margin-top: 30px;
    }

    .menu-category-container {
        margin-bottom: 2.5rem;
        scroll-margin-top: 100px;
    }

    .menu-category-title {
        font-size: 1.5rem;
        font-weight: bold;
        color: #b91c1c;
        margin-bottom: 1rem;
        margin-top: 2rem;
    }

    .menu-cards {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
    }

    .menu-card {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.07);
        padding: 1.2rem;
        width: 230px;
        display: flex;
        flex-direction: column;
        align-items: center;
        transition: box-shadow 0.2s;
    }

    .menu-card:hover {
        box-shadow: 0 6px 24px rgba(0, 0, 0, 0.13);
    }

    .menu-card img {
        border-radius: 8px;
        width: 100%;
        max-width: 180px;
        max-height: 120px;
        object-fit: cover;
        margin-bottom: 0.8rem;
    }

    .menu-card-title {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 0.4rem;
        color: #222;
        text-align: center;
    }

    .menu-card-desc {
        font-size: 0.97rem;
        color: #555;
        margin-bottom: 0.6rem;
        text-align: center;
        min-height: 40px;
    }

    .menu-card-price {
        font-weight: bold;
        color: #388E3C;
        font-size: 1.05rem;
        margin-bottom: 0.2rem;
    }

    .tab-active {
        @apply bg-red-600 text-white;
    }

    .tab-inactive {
        @apply bg-gray-100 text-gray-700 hover:bg-gray-200;
    }

    .modal-fade {
        transition: opacity 0.2s;
    }

    .menu-card-footer {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        margin-top: 0.3rem;


    }

    .transition {
        padding: 3px 9px;
    }

    @media (max-width: 768px) {
        .menu-cards {
            flex-direction: column;
            gap: 1rem;
        }

        .menu-card {
            flex-direction: row;
            align-items: flex-start;
            width: 100%;
            min-width: 0;
            padding: 0.7rem;
        }

        .menu-card img {
            width: 120px;
            max-width: 130px;
            max-height: 170px;
            margin-bottom: 0;
            margin-right: 0.7rem;
        }

        .menu-card-content {
            flex: 1;
            min-width: 0;
            display: flex;
            flex-direction: column;
        }

        .menu-card-title {
            font-size: 1rem;
            margin-bottom: 0.2rem;
            text-align: left;
        }

        .menu-card-desc {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            font-size: 0.95rem;
            margin-bottom: 0.3rem;
            text-align: left;
            cursor: pointer;
        }

        .menu-card-footer {
            display: flex;
            justify-content: space-between;
            flex-direction: row;
            align-items: center;
            margin-top: 0.3rem;
        }

        .menu-card-price {
            font-size: 1rem;
            margin-bottom: 0;
        }

        .menu-card-order-btn {
            margin-left: 0.5rem;
            padding: 0.3rem 0.8rem;
            font-size: 0.95rem;
        }

        .menu-card-desc-expanded {
            white-space: normal;
            overflow: visible;
            text-overflow: unset;
        }

        .menu-card-more {
            color: #b91c1c;
            font-size: 0.93rem;
            margin-left: 0.3rem;
            cursor: pointer;
            text-decoration: underline;
        }
    }
</style>

<!-- Hero Section -->
<div class="fade-in flex flex-col md:flex-row items-center mb-8">
    <img src="{% static 'images/menu_hero.jpg' %}" alt=" SUSHI NARUTO MOMOS AND MORE Menu"
        class="rounded-lg shadow-lg w-full max-w-xs mr-6 mb-4 md:mb-0">
    <div>
        <h1 class="text-3xl font-bold text-red-700 mb-2">Menu of SUSHI NARUTO MOMOS AND MORE</h1>
        <p class="text-lg text-gray-700">Discover our chef’s selection of authentic Japanese sushi, Asian specialties,
            and vegetarian delights. All dishes are freshly prepared with premium ingredients.</p>
    </div>
</div>

<!-- Chef's Recommendation -->
<div class="fade-in bg-yellow-50 border-l-4 border-red-400 p-4 mb-8">
    <h2 class="text-xl font-semibold text-red-600 mb-2">Chef's Recommendation</h2>
    <ul class="list-disc ml-6">
        <li>Signature Naruto Roll – Salmon, avocado, spicy mayo</li>
        <li>Dragon Maki – Tempura shrimp, avocado, eel sauce</li>
        <li>Vegetarian Ikebana Plate – Assorted veggie maki & nigiri</li>
    </ul>
</div>
<nav class="bg-white shadow mb-6">
    <div class="max-w-7xl mx-auto px-4 py-4 flex flex-col md:flex-row justify-between items-center gap-4">
        <h1 class="text-xl font-bold text-center md:text-left"> SUSHI NARUTO MOMOS AND MORE MOMOS AND MORE Menu</h1>
        <div class="flex items-center gap-4 w-full md:w-auto">
            <!-- Search Bar -->
            <div class="relative flex-grow">
                <input type="text" id="menuSearchInput" placeholder="Search menu..."
                    class="w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-red-400">
                <div class="absolute top-0 left-0 inline-flex items-center justify-center w-10 h-full text-gray-400">
                    <svg class="h-5 w-5" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        viewBox="0 0 24 24" stroke="currentColor">
                        <path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>
                <!-- Search results dropdown -->
                <div id="searchResultsDropdown"
                    class="absolute top-full left-0 w-full mt-1 bg-white border rounded-lg shadow-lg z-20 hidden max-h-80 overflow-y-auto">
                    <!-- Search results will be injected here by JavaScript -->
                </div>
            </div>
            <!-- View Button -->
            <div class="relative">
                <button id="categoryButton"
                    class="flex items-center justify-center px-4 py-2 border rounded-lg text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-red-400">
                    Categories
                    <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </button>
                <div id="categoryDropdown"
                    class="absolute right-0 mt-2 w-56 bg-white border rounded shadow-md hidden z-10">
                    <div class="px-4 py-2 font-semibold text-gray-700 border-b">Categories</div>
                    <ul class="text-sm text-gray-700">
                        {% for category in categories %}
                        <li class="px-4 py-2 hover:bg-gray-100 cursor-pointer flex items-center space-x-2"
                            data-category="{{ category.name|slugify }}">
                            <span>{{ category.name }}</span>
                        </li>
                        {% endfor %}
                    </ul>
                </div>
            </div>
        </div>
    </div>
</nav>
<!-- Wrap menu and modal in a single Alpine.js scope -->
<div x-data="orderModal()" x-cloak>
    {# Menu Items by Category #}
    <div>
        {% regroup menuitems by category as category_list %}
        {% for cat in category_list %}
        <div class="menu-category-container fade-in" id="category-{{ cat.grouper.name|slugify }}">
            <div class="menu-category-title">{{ cat.grouper.name }}</div>
            <div class="menu-cards">
                {% for item in cat.list %}
                <div class="menu-card" id="menu-item-{{ item.id }}">
                    {% if item.image %}
                    <img src="{{ item.image.url }}" alt="{{ item.name }}" class="cursor-pointer"
                        @click="openOrderModal('{{ item.name|escapejs }}', {{ item.price }})">
                    {% else %}
                    <img src="{% static 'images/no-image.png' %}" alt="No image" class="cursor-pointer"
                        @click="openOrderModal('{{ item.name|escapejs }}', {{ item.price }})">
                    {% endif %}
                    <div class="menu-card-content">
                        <div class="menu-card-title">{{ item.name }}</div>
                        <div class="menu-card-desc" x-data="{ expanded: false }"
                            :class="expanded ? 'menu-card-desc-expanded' : ''" @click="expanded = !expanded" x-init="
                                let el = $el;
                                let fullText = el.innerText.trim();
                                let words = fullText.split(/\s+/);
                                if (words.length > 3) {
                                    el.setAttribute('data-full', fullText);
                                    el.innerText = words.slice(0,3).join(' ') + '...';
                                    el.insertAdjacentHTML('beforeend', '<span class=\'menu-card-more\' x-show=\'!expanded\'>more</span>');
                                }
                            " x-effect="
                                if (expanded && $el.hasAttribute('data-full')) {
                                    $el.innerText = $el.getAttribute('data-full');
                                } else if ($el.hasAttribute('data-full')) {
                                    let words = $el.getAttribute('data-full').split(/\s+/);
                                    $el.innerText = words.slice(0,3).join(' ') + '...';
                                    $el.insertAdjacentHTML('beforeend', '<span class=\'menu-card-more\' x-show=\'!expanded\'>more</span>');
                                }
                            ">
                            {{ item.description }}
                        </div>
                        <div class="menu-card-footer">
                            <div class="menu-card-price">{{ item.price }} CHF</div>
                            <button
                                class="bg-red-600 text-white rounded menu-card-order-btn hover:bg-red-700 transition"
                                @click.prevent="$nextTick(() => openOrderModal('{{ item.name|escapejs }}', {{ item.price }}))">
                                Order
                            </button>
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
        {% empty %}
        <p>No menu items available.</p>
        {% endfor %}
    </div>

    <!-- 3-step modal -->
    <div x-show="open" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 modal-fade"
        x-transition:enter="transition ease-out duration-200" x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100" x-transition:leave="transition ease-in duration-150"
        x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" aria-modal="true" role="dialog">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 relative" @click.away="reset"
            @keydown.escape.window="reset">
            <button class="absolute top-2 right-2 text-gray-400 hover:text-red-600 text-2xl" @click="reset"
                aria-label="Close">&times;</button>
            <h2 class="text-lg font-bold mb-4 text-center">Order: <span x-text="itemName"></span></h2>
            <!-- Step 1: Cart Review -->
            <template x-if="step === 1">
                <div>
                    <h3 class="font-semibold mb-2">Current Order</h3>
                    <table class="min-w-full bg-white border text-sm mb-4">
                        <thead>
                            <tr>
                                <th class="px-3 py-2 border text-left">Food</th>
                                <th class="px-3 py-2 border text-right">Price</th>
                                <th class="px-3 py-2 border text-center">Qty</th>
                                <th class="px-3 py-2 border text-right">Subtotal</th>
                                <th class="px-3 py-2 border text-center">Remove</th>
                            </tr>
                        </thead>
                        <tbody>
                            <template x-if="cart.length === 0">
                                <tr>
                                    <td colspan="5" class="px-3 py-4 border text-center text-gray-500">No items in current order.</td>
                                </tr>
                            </template>
                            <template x-for="(c, i) in cart" :key="i">
                                <tr>
                                    <td class="px-3 py-2 border" x-text="c.name"></td>
                                    <td class="px-3 py-2 border text-right" x-text="c.price.toFixed(2) + ' CHF'"></td>
                                    <td class="px-3 py-2 border text-center">
                                        <button class="px-2 py-1 bg-gray-200 rounded-l" @click="decrementModalQty(i)">-</button>
                                        <span class="px-2" x-text="c.qty"></span>
                                        <button class="px-2 py-1 bg-gray-200 rounded-r" @click="incrementModalQty(i)">+</button>
                                    </td>
                                    <td class="px-3 py-2 border text-right" x-text="(c.qty * c.price).toFixed(2) + ' CHF'"></td>
                                    <td class="px-3 py-2 border text-center">
                                        <button class="text-red-600 text-xs" @click="removeFromModalCart(i)">Remove</button>
                                    </td>
                                </tr>
                            </template>
                        </tbody>
                        <tfoot>
                           
                            <tr x-show="deliveryFee() > 0">
                                <td colspan="3" class="px-3 py-2 border text-right font-semibold">Delivery Fee</td>
                                <td class="px-3 py-2 border text-right font-bold" x-text="deliveryFee().toFixed(2) + ' CHF'"></td>
                                <td class="px-3 py-2 border"></td>
                            </tr>
                            <tr>
                                <td colspan="3" class="px-3 py-2 border text-right font-semibold">Total</td>
                                 <td class="px-3 py-2 border text-right font-bold"
                                        x-text="cartTotal().toFixed(2) + ' CHF'"></td>
                                    <td class="px-3 py-2 border"></td>
                                <td class="px-3 py-2 border"></td>
                            </tr>
                        </tfoot>
                    </table>
                    <div class="flex gap-2">
                         <button class="bg-gray-300 text-gray-700 px-4 py-2 rounded"
                                @click="reset()">Continue Shopping</button>
                        <button class="bg-blue-600 text-white px-4 py-2 rounded" @click="nextStep()">Next</button>
                    </div>
                </div>
            </template>
            <!-- Step 2: User Info & Delivery -->
            <template x-if="step === 2">
                <div>
                    <div class="mb-4">
                        <label class="block font-semibold mb-1">Email</label>
                        <input type="email" x-model="email" class="border rounded px-2 py-1 w-full" placeholder="Email">
                    </div>
                    <div class="mb-4">
                        <label class="block font-semibold mb-1">Mobile Number</label>
                        <input type="tel" x-model="mobile" class="border rounded px-2 py-1 w-full"
                            placeholder="Mobile Number">
                    </div>
                    <div class="mb-4">
                        <label class="block font-semibold mb-1">Address</label>
                        <input type="text" x-model="address" class="border rounded px-2 py-1 w-full"
                            placeholder="Address">
                    </div>
                    <div class="mb-4">
                        <label class="block font-semibold mb-1">Delivery Method</label>
                        <select x-model="delivery" class="border rounded px-2 py-1 w-full">
                            <option value="Click & Collect">Click & Collect (Free)</option>
                            <option value="Free">Free</option>
                            <option value="Livraison Express 3.5km">Livraison Express 3.5km</option>
                        </select>
                    </div>
                    <div class="mb-4">
                        <label class="block font-semibold mb-1">Order Type</label>
                        <select x-model="orderType" class="border rounded px-2 py-1 w-full">
                            <option value="now">Order Now (Live)</option>
                            <option value="later">Order Later (Schedule)</option>
                        </select>
                    </div>
                    <template x-if="orderType==='later'">
                        <div>
                            <div class="mb-3">
                                <label class="block font-semibold mb-1">Pick Date</label>
                                <input type="date" x-model="orderDate" class="border rounded px-2 py-1 w-full">
                            </div>
                            <div class="mb-3">
                                <label class="block font-semibold mb-1">Pick Time</label>
                                <input type="time" x-model="orderTime" class="border rounded px-2 py-1 w-full">
                            </div>
                        </div>
                    </template>
                    <template x-if="error">
                        <div class="text-red-600 mb-2" x-text="error"></div>
                    </template>
                    <div class="flex justify-between">
                        <button class="bg-gray-300 text-gray-700 px-4 py-2 rounded" @click="step=1">Back</button>
                        <button class="bg-green-600 text-white px-4 py-2 rounded"
                            @click="validateAndNext()">Next</button>
                    </div>
                </div>
            </template>
            <!-- Step 3: Confirm & Place Order -->
            <template x-if="step === 3">
                <div>
                    <div class="mb-4">
                        <div><b>Item:</b> <span x-text="itemName"></span></div>
                        <div><b>Qty:</b> <span x-text="qty"></span></div>
                        <div><b>Total:</b> <span x-text="(qty * price).toFixed(2)"></span> CHF</div>
                        <div><b>Email:</b> <span x-text="email"></span></div>
                        <div><b>Mobile:</b> <span x-text="mobile"></span></div>
                        <div><b>Address:</b> <span x-text="address"></span></div>
                        <div><b>Delivery:</b> <span x-text="delivery"></span></div>
                        <div><b>Order Type:</b> <span x-text="orderType"></span></div>
                        <template x-if="orderType==='later'">
                            <div>
                                <div><b>Date:</b> <span x-text="orderDate"></span></div>
                                <div><b>Time:</b> <span x-text="orderTime"></span></div>
                            </div>
                        </template>
                    </div>
                    <template x-if="error">
                        <div class="text-red-600 mb-2" x-text="error"></div>
                    </template>
                    <button class="bg-blue-600 text-white px-4 py-2 rounded w-full" @click="submitOrder()"
                        :disabled="loading">
                        <span x-show="!loading">Place Order</span>
                        <span x-show="loading" class="flex items-center justify-center">
                            <svg class="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"
                                    fill="none" />
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z" />
                            </svg>
                            Processing...
                        </span>
                    </button>
                </div>
            </template>
            <!-- Success Message -->
            <template x-if="step === 4">
                <div class="text-center py-8">
                    <div class="text-green-600 text-4xl mb-2">✔</div>
                    <div class="font-semibold mb-2" x-text="successMsg"></div>
                    <button class="mt-2 px-4 py-2 bg-red-600 text-white rounded" @click="reset">Close</button>
                </div>
            </template>
        </div>
    </div>

    <!-- Add a floating cart button for easy access -->
    <button x-data x-on:click="window.dispatchEvent(new CustomEvent('open-cart'))"
        class="fixed bottom-6 right-6 z-50 bg-red-600 text-white rounded-full shadow-lg p-4 hover:bg-red-700 focus:outline-none"
        title="View Cart">
        <svg class="w-7 h-7" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round"
                d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13l-1.35 2.7A1 1 0 007.5 17h9a1 1 0 00.85-1.53L17 13M7 13V6a1 1 0 011-1h6a1 1 0 011 1v7" />
        </svg>
    </button>

    <!-- Cart Modal (outside order modal, but inside Alpine scope) -->
    <div x-data="orderCart()" x-cloak>
        <div x-show="cartOpen"
            class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 modal-fade"
            x-transition:enter="transition ease-out duration-200" x-transition:enter-start="opacity-0"
            x-transition:enter-end="opacity-100" x-transition:leave="transition ease-in duration-150"
            x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0">
            <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 relative">
                <button class="absolute top-2 right-2 text-gray-400 hover:text-red-600 text-2xl"
                    @click="closeCart()" aria-label="Close">&times;</button>
                <h2 class="text-lg font-bold mb-4 text-center">Your Order</h2>
                <template x-if="cart.length === 0">
                    <div class="text-center text-gray-500 py-8">No items in cart.</div>
                </template>
                <template x-if="cart.length > 0">
                    <div>
                        <table class="min-w-full bg-white border text-sm mb-4">
                            <thead>
                                <tr>
                                    <th class="px-3 py-2 border text-left">Food</th>
                                    <th class="px-3 py-2 border text-right">Price</th>
                                    <th class="px-3 py-2 border text-center">Qty</th>
                                    <th class="px-3 py-2 border text-right">Subtotal</th>
                                    <th class="px-3 py-2 border text-center">Remove</th>
                                </tr>
                            </thead>
                            <tbody>
                                <template x-for="(c, i) in cart" :key="i">
                                    <tr>
                                        <td class="px-3 py-2 border" x-text="c.name"></td>
                                        <td class="px-3 py-2 border text-right"
                                            x-text="c.price.toFixed(2) + ' CHF'"></td>
                                        <td class="px-3 py-2 border text-center">
                                            <button class="px-2 py-1 bg-gray-200 rounded-l"
                                                @click="decrementQty(i)">-</button>
                                            <span class="px-2" x-text="c.qty"></span>
                                            <button class="px-2 py-1 bg-gray-200 rounded-r"
                                                @click="incrementQty(i)">+</button>
                                        </td>
                                        <td class="px-3 py-2 border text-right"
                                            x-text="(c.qty * c.price).toFixed(2) + ' CHF'"></td>
                                        <td class="px-3 py-2 border text-center">
                                            <button class="text-red-600 text-xs"
                                                @click="removeFromCart(i)">Cancel</button>
                                        </td>
                                    </tr>
                                </template>
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="3" class="px-3 py-2 border text-right font-semibold">Total
                                    </td>
                                    <td class="px-3 py-2 border text-right font-bold"
                                        x-text="cartTotal().toFixed(2) + ' CHF'"></td>
                                    <td class="px-3 py-2 border"></td>
                                </tr>
                            </tfoot>
                        </table>
                        <div class="flex justify-between">
                            <button class="bg-gray-300 text-gray-700 px-4 py-2 rounded"
                                @click="closeCart()">Continue Shopping</button>
                            <button class="bg-blue-600 text-white px-4 py-2 rounded"
                                @click="checkout()">Checkout</button>
                        </div>
                    </div>
                </template>
            </div>
        </div>
    </div>
</div>

<!-- Alpine.js for modal logic -->
<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
<script>
    function orderModal() {
        return {
            open: false,
            step: 1,
            itemName: '',
            price: 0,
            qty: 1,
            cart: [],
            orderType: 'now',
            orderDate: '',
            orderTime: '',
            email: '',
            mobile: '',
            address: '',
            delivery: 'Click & Collect',
            loading: false,
            error: '',
            successMsg: 'Order placed successfully!',

            init() {
                // ensure a shared global cart exists
                window.globalCart = window.globalCart || [];
                this.cart = window.globalCart;
                // update local reference when other components update the global cart
                window.addEventListener('cart-updated', () => {
                    this.cart = [...window.globalCart] || []; // Use spread for reactivity
                });
            },

            openOrderModal(name, price) {
                this.open = true;
                this.step = 1;
                this.itemName = name;
                this.price = price;
                this.qty = 1;
                this.orderType = 'now';
                this.orderDate = '';
                this.orderTime = '';
                this.email = '';
                this.mobile = '';
                this.address = '';
                this.delivery = 'Click & Collect';
                this.loading = false;
                this.error = '';
                this.successMsg = 'Order placed successfully!';

                window.globalCart = window.globalCart || [];
                const existingItemIndex = window.globalCart.findIndex(item => item.name === name);

                if (existingItemIndex !== -1) {
                    // If item exists, increment its quantity
                    const item = window.globalCart[existingItemIndex];
                    window.globalCart[existingItemIndex] = { ...item, qty: item.qty + 1 };

                } else {
                    // Otherwise, add it as a new item
                    window.globalCart.push({
                        name: name,
                        price: Number(price) || 0,
                        qty: 1
                    });
                }
                
                // Use spread operator to ensure Alpine detects the change
                this.cart = [...window.globalCart];
                window.dispatchEvent(new CustomEvent('cart-updated'));
            },

            nextStep() {
                if ((window.globalCart || []).length === 0) {
                    this.error = 'Your cart is empty. Please add items to proceed.';
                    return;
                }
                this.step = 2;
            },

            // modal-specific cart helpers (operate on shared window.globalCart)
            incrementModalQty(i) {
                const item = window.globalCart[i];
                if (item) {
                    window.globalCart[i] = { ...item, qty: (item.qty || 1) + 1 };
                }
                window.dispatchEvent(new CustomEvent('cart-updated'));
                this.cart = [...window.globalCart];
            },
            decrementModalQty(i) {
                const item = window.globalCart[i];
                if (item) {
                    const newQty = Math.max(1, (item.qty || 1) - 1);
                    window.globalCart[i] = { ...item, qty: newQty };
                }
                window.dispatchEvent(new CustomEvent('cart-updated'));
                this.cart = [...window.globalCart];
            },
            removeFromModalCart(i) {
                window.globalCart.splice(i, 1);
                window.dispatchEvent(new CustomEvent('cart-updated'));
                this.cart = [...window.globalCart]; // force Alpine to re-render
            },
            modalCartTotal() {
                return (window.globalCart || []).reduce((sum, c) => sum + (Number(c.price || 0) * (Number(c.qty || 1))), 0);
            },

            deliveryFee() {
                if (this.delivery === 'Livraison Express 3.5km') {
                    return 5;
                }
                return 0;
            },

            grandTotal() {
                return this.modalCartTotal() + this.deliveryFee();
            },

            validateAndNext() {
                this.error = '';
                if (!this.email || !this.mobile || !this.address || !this.delivery) {
                    this.error = 'Please fill all required fields.';
                    return;
                }
                if (this.orderType === 'later' && (!this.orderDate || !this.orderTime)) {
                    this.error = 'Please select both date and time.';
                    return;
                }
                this.step = 3;
            },

            submitOrder() {
                this.error = '';
                this.loading = true;

                fetch('/order/submit/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': (document.querySelector('[name=csrfmiddlewaretoken]') || {}).value || ''
                    },
                    body: JSON.stringify({
                        // send the whole shared cart to server
                        cart: window.globalCart || [],
                        orderType: this.orderType,
                        orderDate: this.orderType === 'later' ? this.orderDate : null,
                        orderTime: this.orderType === 'later' ? this.orderTime : null,
                        email: this.email,
                        mobile: this.mobile,
                        address: this.address,
                        delivery: this.delivery
                    })
                })
                    .then(res => res.json())
                    .then(data => {
                        this.loading = false;
                        if (data.success) {
                            this.successMsg = 'Order placed successfully!';
                            // clear shared cart on success
                            window.globalCart = [];
                            window.dispatchEvent(new CustomEvent('cart-updated'));
                            this.step = 4;
                        } else {
                            this.error = data.error || 'Order failed. Try again.';
                        }
                    })
                    .catch(() => {
                        this.loading = false;
                        this.error = 'Order failed. Try again.';
                    });
            },

            reset() {
                this.open = false;
                // Don't reset the cart here, just the modal state
                this.step = 1;
                this.itemName = '';
                this.price = 0;
                this.qty = 1;
                this.orderType = 'now';
                this.orderDate = '';
                this.orderTime = '';
                this.email = '';
                this.mobile = '';
                this.address = '';
                this.delivery = 'Click & Collect';
                this.loading = false;
                this.error = '';
                this.successMsg = 'Order placed successfully!';
            }
        }
    }

    // New: orderCart Alpine component to manage cart and listen for add-to-cart events
    function orderCart() {
        return {
            cartOpen: false,
            cart: [],
            init() {
                // Ensure shared cart exists and keep local ref in sync
                window.globalCart = window.globalCart || [];
                this.cart = window.globalCart;
                window.addEventListener('cart-updated', () => {
                    this.cart = window.globalCart || [];
                });
                window.addEventListener('add-to-cart', (e) => {
                    if (e && e.detail) this.addToCart(e.detail);
                });
                // Listen for open-cart event from floating button
                window.addEventListener('open-cart', () => {
                    this.openCart();
                });
             },
             addToCart(item) {
                 if (!item || !item.name) return;
                // Use shared global cart so modal and cart stay in sync
                window.globalCart = window.globalCart || [];
                let idx = window.globalCart.findIndex(c => c.name === item.name && Number(c.price) === Number(item.price));
                if (idx !== -1) {
                    window.globalCart[idx].qty = (window.globalCart[idx].qty || 1) + (item.qty || 1);
                } else {
                    window.globalCart.push({
                        name: item.name,
                        price: Number(item.price) || 0,
                        qty: Number(item.qty) || 1
                    });
                }
                // update local ref and notify listeners
                this.cart = window.globalCart;
                window.dispatchEvent(new CustomEvent('cart-updated'));
             },
             incrementQty(i) {
                 if (this.cart[i]) {
                    this.cart[i].qty++;
                    window.globalCart[i].qty = this.cart[i].qty;
                    window.dispatchEvent(new CustomEvent('cart-updated'));
                    this.cart = [...window.globalCart];
                 }
             },
             decrementQty(i) {
                 if (this.cart[i]) {
                     this.cart[i].qty = Math.max(1, this.cart[i].qty - 1);
                     window.globalCart[i].qty = this.cart[i].qty;
                     window.dispatchEvent(new CustomEvent('cart-updated'));
                     this.cart = [...window.globalCart];
                 }
             },
             removeFromCart(i) {
                window.globalCart.splice(i, 1);
                this.cart = [...window.globalCart];
                window.dispatchEvent(new CustomEvent('cart-updated'));
             },
             cartTotal() {
                 return this.cart.reduce((sum, c) => sum + (c.price * (c.qty || 1)), 0);
             },
             openCart() {
                 this.cartOpen = true;
             },
             closeCart() {
                 this.cartOpen = false;
             },
             checkout() {
                 // Example: open the order modal with first item for checkout (or redirect to checkout page)
                 if (this.cart.length > 0) {
                     // You might want to open your order modal and populate data, or send the cart to server
                     // For now just close cart (customize as needed)
                     this.closeCart();
                 }
             }
         }
     }
 
     document.addEventListener('DOMContentLoaded', function () {
         const searchInput = document.getElementById('menuSearchInput');
         const searchResultsDropdown = document.getElementById('searchResultsDropdown');
 
         if (searchInput && searchResultsDropdown) {
             searchInput.addEventListener('input', function () {
                 const query = this.value.trim();
 
                 if (query.length < 2) {
                     searchResultsDropdown.classList.add('hidden');
                     return;
                 }
 
                 fetch(`/api/search_menu_items/?q=${encodeURIComponent(query)}`)
                     .then(response => response.json())
                     .then(data => {
                         searchResultsDropdown.innerHTML = '';
                         if (data.length > 0) {
                             data.forEach(item => {
                                 const resultCard = document.createElement('a');
                                 resultCard.href = item.url;
                                 resultCard.classList.add('block', 'p-4', 'hover:bg-gray-100', 'border-b', 'cursor-pointer');
 
                                 const imageHtml = item.image_url
                                     ? `<img src="${item.image_url}" alt="${item.name}" class="w-16 h-16 object-cover rounded-md mr-4">`
                                     : `<div class="w-16 h-16 bg-gray-200 rounded-md mr-4"></div>`;
 
                                 resultCard.innerHTML = `
                                     <div class="flex items-center">
                                         ${imageHtml}
                                         <div>
                                             <div class="font-semibold text-gray-800">${item.name}</div>
                                             <div class="text-sm text-gray-600">${item.description || ''}</div>
                                         </div>
                                     </div>
                                 `;
 
                                 resultCard.addEventListener('click', function (e) {
                                     e.preventDefault();
                                     const targetElement = document.querySelector(item.url);
                                     if (targetElement) {
                                         targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                         targetElement.classList.add('transition', 'duration-500', 'ease-in-out', 'ring-2', 'ring-red-500', 'ring-offset-2');
                                         setTimeout(() => {
                                             targetElement.classList.remove('ring-2', 'ring-red-500', 'ring-offset-2');
                                         }, 2000);
                                     }
                                     searchResultsDropdown.classList.add('hidden');
                                     searchInput.value = '';
                                 });
 
                                 searchResultsDropdown.appendChild(resultCard);
                             });
                             searchResultsDropdown.classList.remove('hidden');
                         } else {
                             searchResultsDropdown.innerHTML = '<div class="p-4 text-gray-500">No results found.</div>';
                             searchResultsDropdown.classList.remove('hidden');
                         }
                     })
                     .catch(error => {
                         console.error('Error fetching search results:', error);
                         searchResultsDropdown.classList.add('hidden');
                     });
             });
         }
 
         // Category dropdown handling
         const categoryButton = document.getElementById('categoryButton');
         const categoryDropdown = document.getElementById('categoryDropdown');
         const categoryLinks = document.querySelectorAll('#categoryDropdown [data-category]');
 
         if (categoryButton && categoryDropdown) {
             categoryButton.addEventListener('click', function (e) {
                 e.stopPropagation();
                 categoryDropdown.classList.toggle('hidden');
             });
 
             categoryLinks.forEach(link => {
                 link.addEventListener('click', function () {
                     const categorySlug = this.dataset.category;
                     const categoryElement = document.getElementById(`category-${categorySlug}`);
                     if (categoryElement) {
                         categoryElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                     }
                     categoryDropdown.classList.add('hidden');
                 });
             });
 
             document.addEventListener('click', function (e) {
                 if (!searchInput?.contains(e.target) && !searchResultsDropdown?.contains(e.target)) {
                     searchResultsDropdown?.classList.add('hidden');
                 }
                 if (!categoryButton.contains(e.target) && !categoryDropdown.contains(e.target)) {
                     categoryDropdown.classList.add('hidden');
                 }
             });
         }
     });
 </script>
 
 {% endblock %}




 <!-- this old card  -->
  {% extends "base.html" %}
{% load static %}
{% block title %}Your Cart – SUSHI NARUTO MOMOS AND MORE{% endblock %}

{% block content %}
<div class="container mx-auto p-4" x-data="cartPage()">
    <h1 class="text-2xl font-bold mb-4">Your Shopping Cart</h1>

    <!-- Step 1: Cart Review -->
    <template x-if="step === 1">
        <div>
            <h3 class="font-semibold mb-2">Current Order</h3>
            <table class="min-w-full bg-white border text-sm mb-4">
                <thead>
                    <tr>
                        <th class="px-3 py-2 border text-left">Food</th>
                        <th class="px-3 py-2 border text-right">Price</th>
                        <th class="px-3 py-2 border text-center">Qty</th>
                        <th class="px-3 py-2 border text-right">Subtotal</th>
                        <th class="px-3 py-2 border text-center">Remove</th>
                    </tr>
                </thead>
                <tbody>
                    <template x-if="cart.length === 0">
                        <tr>
                            <td colspan="5" class="px-3 py-4 border text-center text-gray-500">No items in current order.</td>
                        </tr>
                    </template>
                    <template x-for="(c, i) in cart" :key="i">
                        <tr>
                            <td class="px-3 py-2 border" x-text="c.name"></td>
                            <td class="px-3 py-2 border text-right" x-text="c.price.toFixed(2) + ' CHF'"></td>
                            <td class="px-3 py-2 border text-center">
                                <button class="px-2 py-1 bg-gray-200 rounded-l" @click="decrementQty(i)">-</button>
                                <span class="px-2" x-text="c.qty"></span>
                                <button class="px-2 py-1 bg-gray-200 rounded-r" @click="incrementQty(i)">+</button>
                            </td>
                            <td class="px-3 py-2 border text-right" x-text="(c.qty * c.price).toFixed(2) + ' CHF'"></td>
                            <td class="px-3 py-2 border text-center">
                                <button class="text-red-600 text-xs" @click="removeFromCart(i)">Remove</button>
                            </td>
                        </tr>
                    </template>
                </tbody>
                <tfoot>
                    <tr x-show="deliveryFee() > 0">
                        <td colspan="3" class="px-3 py-2 border text-right font-semibold">Delivery Fee</td>
                        <td class="px-3 py-2 border text-right font-bold" x-text="deliveryFee().toFixed(2) + ' CHF'"></td>
                        <td class="px-3 py-2 border"></td>
                    </tr>
                    <tr>
                        <td colspan="3" class="px-3 py-2 border text-right font-semibold">Total</td>
                        <td class="px-3 py-2 border text-right font-bold" x-text="grandTotal().toFixed(2) + ' CHF'"></td>
                        <td class="px-3 py-2 border"></td>
                    </tr>
                </tfoot>
            </table>
            <div class="flex justify-between">
                <a href="{% url 'menu' %}" class="bg-gray-300 text-gray-700 px-4 py-2 rounded">Continue Shopping</a>
                <button class="bg-blue-600 text-white px-4 py-2 rounded" @click="nextStep()" :disabled="cart.length === 0">Next</button>
            </div>
        </div>
    </template>

    <!-- Step 2: User Details -->
    <template x-if="step === 2">
        <div>
            <div class="mb-4">
                <label class="block font-semibold mb-1">Email</label>
                <input type="email" x-model="email" class="border rounded px-2 py-1 w-full" placeholder="Email">
            </div>
            <div class="mb-4">
                <label class="block font-semibold mb-1">Mobile Number</label>
                <input type="tel" x-model="mobile" class="border rounded px-2 py-1 w-full" placeholder="Mobile Number">
            </div>
            <div class="mb-4">
                <label class="block font-semibold mb-1">Address</label>
                <input type="text" x-model="address" class="border rounded px-2 py-1 w-full" placeholder="Address">
            </div>
            <div class="mb-4">
                <label class="block font-semibold mb-1">Delivery Method</label>
                <select x-model="delivery" class="border rounded px-2 py-1 w-full">
                    <option value="Click & Collect">Click & Collect (Free)</option>
                    <option value="Free">Free</option>
                    <option value="Livraison Express 3.5km">Livraison Express 3.5km</option>
                </select>
            </div>
            <div class="mb-4">
                <label class="block font-semibold mb-1">Order Type</label>
                <select x-model="orderType" class="border rounded px-2 py-1 w-full">
                    <option value="now">Order Now (Live)</option>
                    <option value="later">Order Later (Schedule)</option>
                </select>
            </div>
            <template x-if="orderType==='later'">
                <div>
                    <div class="mb-3">
                        <label class="block font-semibold mb-1">Pick Date</label>
                        <input type="date" x-model="orderDate" class="border rounded px-2 py-1 w-full">
                    </div>
                    <div class="mb-3">
                        <label class="block font-semibold mb-1">Pick Time</label>
                        <input type="time" x-model="orderTime" class="border rounded px-2 py-1 w-full">
                    </div>
                </div>
            </template>
            <template x-if="error">
                <div class="text-red-600 mb-2" x-text="error"></div>
            </template>
            <div class="flex justify-between">
                <button class="bg-gray-300 text-gray-700 px-4 py-2 rounded" @click="step=1">Back</button>
                <button class="bg-green-600 text-white px-4 py-2 rounded" @click="validateAndNext()">Next</button>
            </div>
        </div>
    </template>

    <!-- Step 3: Order Summary -->
    <template x-if="step === 3">
        <div>
            <h3 class="font-semibold mb-2">Order Summary</h3>
            <div class="mb-2"><strong>Email:</strong> <span x-text="email"></span></div>
            <div class="mb-2"><strong>Mobile:</strong> <span x-text="mobile"></span></div>
            <div class="mb-2"><strong>Address:</strong> <span x-text="address"></span></div>
            <div class="mb-2"><strong>Delivery Method:</strong> <span x-text="delivery"></span></div>
            <div class="mb-2"><strong>Order Type:</strong> <span x-text="orderType === 'now' ? 'Order Now' : 'Order Later'"></span></div>
            <template x-if="orderType === 'later'">
                <div class="mb-2"><strong>Scheduled for:</strong> <span x-text="orderDate"></span> at <span x-text="orderTime"></span></div>
            </template>
            <h4 class="font-semibold mt-4 mb-2">Final Cart</h4>
            <table class="min-w-full bg-white border text-sm mb-4">
                <thead>
                    <tr>
                        <th class="px-3 py-2 border text-left">Food</th>
                        <th class="px-3 py-2 border text-right">Price</th>
                        <th class="px-3 py-2 border text-center">Qty</th>
                        <th class="px-3 py-2 border text-right">Subtotal</th>
                    </tr>
                </thead>
                <tbody>
                    <template x-for="(c, i) in cart" :key="i">
                        <tr>
                            <td class="px-3 py-2 border" x-text="c.name"></td>
                            <td class="px-3 py-2 border text-right" x-text="c.price.toFixed(2) + ' CHF'"></td>
                            <td class="px-3 py-2 border text-center" x-text="c.qty"></td>
                            <td class="px-3 py-2 border text-right" x-text="(c.qty * c.price).toFixed(2) + ' CHF'"></td>
                        </tr>
                    </template>
                </tbody>
                <tfoot>
                    <tr x-show="deliveryFee() > 0">
                        <td colspan="3" class="px-3 py-2 border text-right font-semibold">Delivery Fee</td>
                        <td class="px-3 py-2 border text-right font-bold" x-text="deliveryFee().toFixed(2) + ' CHF'"></td>
                    </tr>
                    <tr>
                        <td colspan="3" class="px-3 py-2 border text-right font-semibold">Total</td>
                        <td class="px-3 py-2 border text-right font-bold" x-text="grandTotal().toFixed(2) + ' CHF'"></td>
                    </tr>
                </tfoot>
            </table>
            <div class="flex justify-between">
                <button class="bg-gray-300 text-gray-700 px-4 py-2 rounded" @click="step=2">Edit Details</button>
                <button class="bg-green-600 text-white px-4 py-2 rounded" @click="submitOrder()" :disabled="loading">
                    <span x-show="!loading">Confirm Order</span>
                    <span x-show="loading">Processing...</span>
                </button>
            </div>
        </div>
    </template>

    <!-- Step 4: Order Success -->
    <template x-if="step === 4">
        <div>
            <h3 class="font-semibold mb-2 text-green-600">Order Successful!</h3>
            <p>Thank you for your order. Your order has been placed successfully.</p>
            <p>An email confirmation will be sent to <strong x-text="email"></strong>.</p>
            <div class="mt-4">
                <a href="{% url 'menu' %}" class="bg-blue-600 text-white px-4 py-2 rounded">Back to Menu</a>
            </div>
        </div>
    </template>
</div>

<script>
function cartPage() {
    return {
        step: 1,
        cart: [],
        orderType: 'now',
        orderDate: '',
        orderTime: '',
        email: '{{ request.user.email|default:"" }}',
        mobile: '',
        address: '',
        delivery: 'Click & Collect',
        loading: false,
        error: '',
        successMsg: '',

        init() {
            window.globalCart = window.globalCart || [];
            this.cart = [...window.globalCart];
            window.addEventListener('cart-updated', () => {
                this.cart = [...window.globalCart];
            });
        },

        nextStep() {
            if (this.cart.length === 0) {
                this.error = 'Your cart is empty. Please add items to proceed.';
                return;
            }
            this.error = '';
            this.step = 2;
        },

        incrementQty(i) {
            const item = this.cart[i];
            if (item) {
                this.cart[i] = { ...item, qty: (item.qty || 1) + 1 };
                window.globalCart = [...this.cart];
                window.dispatchEvent(new CustomEvent('cart-updated'));
            }
        },
        decrementQty(i) {
            const item = this.cart[i];
            if (item && item.qty > 1) {
                this.cart[i] = { ...item, qty: item.qty - 1 };
                window.globalCart = [...this.cart];
                window.dispatchEvent(new CustomEvent('cart-updated'));
            }
        },
        removeFromCart(i) {
            this.cart.splice(i, 1);
            window.globalCart = [...this.cart];
            window.dispatchEvent(new CustomEvent('cart-updated'));
        },
        cartTotal() {
            return this.cart.reduce((sum, c) => sum + (Number(c.price || 0) * (Number(c.qty || 1))), 0);
        },
        deliveryFee() {
            if (this.delivery === 'Livraison Express 3.5km') {
                return 5;
            }
            return 0;
        },
        grandTotal() {
            return this.cartTotal() + this.deliveryFee();
        },

        validateAndNext() {
            this.error = '';
            if (!this.email || !this.mobile || !this.address || !this.delivery) {
                this.error = 'Please fill all required fields.';
                return;
            }
            if (this.orderType === 'later' && (!this.orderDate || !this.orderTime)) {
                this.error = 'Please select both date and time for a scheduled order.';
                return;
            }
            this.step = 3;
        },

        submitOrder() {
            this.error = '';
            this.loading = true;

            fetch('/order/submit/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': '{{ csrf_token }}'
                },
                body: JSON.stringify({
                    cart: this.cart,
                    orderType: this.orderType,
                    orderDate: this.orderType === 'later' ? this.orderDate : null,
                    orderTime: this.orderType === 'later' ? this.orderTime : null,
                    email: this.email,
                    mobile: this.mobile,
                    address: this.address,
                    delivery: this.delivery
                })
            })
            .then(res => res.json())
            .then(data => {
                this.loading = false;
                if (data.success) {
                    this.successMsg = data.message || 'Order placed successfully!';
                    window.globalCart = []; // Clear cart on success
                    window.dispatchEvent(new CustomEvent('cart-updated'));
                    this.step = 4;
                } else {
                    this.error = data.error || 'Order failed. Please try again.';
                }
            })
            .catch(() => {
                this.loading = false;
                this.error = 'An unexpected error occurred. Please try again.';
            });
        }
    }
}
</script>
{% endblock %}



<!-- this old order food table  -->

{% extends "admin2/base2.html" %}
{% block title %}Order Details{% endblock %}
{% block content %}
<div class="container mx-auto px-4 py-8">
    <h2 class="text-3xl font-semibold mb-6 text-gray-800">Order Details</h2>
    
    <div class="overflow-x-auto shadow-lg rounded-lg">
        <table class="min-w-full bg-white border border-gray-200">
            <thead class="bg-gray-100 text-gray-700 uppercase text-sm font-semibold">
                <tr>
                    <th class="px-4 py-3 border">Item</th>
                    <th class="px-4 py-3 border">Qty</th>
                    <th class="px-4 py-3 border">Total</th>
                    <th class="px-4 py-3 border">Status</th>
                    <th class="px-4 py-3 border text-center">Actions</th>
                </tr>
            </thead>
            <tbody class="text-gray-800">
                {% for order in orders %}
                <tr class="hover:bg-gray-50 transition">
                    <td class="px-4 py-3 border font-medium">{{ order.item }}</td>
                    <td class="px-4 py-3 border text-center">{{ order.qty }}</td>
                    <td class="px-4 py-3 border text-right">{{ order.price|floatformat:2 }} CHF</td>
                    <td id="status-{{ order.id }}" class="px-4 py-3 border text-center font-semibold 
                        {% if order.status == 'Accepted' %}bg-green-100 text-green-700
                        {% elif order.status == 'Making' %}bg-yellow-100 text-yellow-700
                        {% elif order.status == 'Ready to Collect' %}bg-blue-100 text-blue-700
                        {% elif order.status == 'Delivered' %}bg-purple-100 text-purple-700
                        {% elif order.status == 'Cancelled' %}bg-red-100 text-red-700
                        {% endif %}">
                        {{ order.status }}
                        {% if order.cancel_reason %}
                        <br><small class="text-gray-600 italic">Reason: {{ order.cancel_reason }}</small>
                        {% endif %}
                    </td>
                    <td class="px-4 py-3 border text-center">
                        <form method="post" action="{% url 'order_action_admin' order.id %}" class="inline order-action-form" data-order-id="{{ order.id }}">
                            {% csrf_token %}
                            <input type="hidden" name="reason" class="cancel-reason-input">
                            <div class="flex flex-wrap gap-2 justify-center">
                                <button type="submit" name="action" value="accept" class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded text-xs">Accept</button>
                                <button type="submit" name="action" value="making" class="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded text-xs">Making</button>
                                <button type="submit" name="action" value="collect" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-xs">Collect</button>
                                <button type="submit" name="action" value="delivered" class="bg-purple-500 hover:bg-purple-600 text-white px-3 py-1 rounded text-xs">Deliver</button>
                                <button type="submit" name="action" value="cancel" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-xs cancel-btn">Cancel</button>
                            </div>
                        </form>
                    </td>
                </tr>
                {% empty %}
                <tr>
                    <td colspan="5" class="text-center py-6 text-gray-500">No orders found.</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>

<!-- Cancel Reason Modal -->
<div id="cancel-modal" class="fixed inset-0 bg-gray-800 bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg shadow-2xl w-full max-w-md mx-4">
        <h3 class="text-xl font-semibold mb-3 text-gray-800">Cancel Order</h3>
        <p class="text-sm text-gray-600 mb-3">Please provide a reason for cancellation:</p>
        <textarea id="cancel-reason-textarea" class="w-full p-2 border rounded-lg focus:ring focus:ring-red-200" rows="4" placeholder="Enter your reason..."></textarea>
        <div class="mt-5 flex justify-end gap-3">
            <button id="modal-cancel-btn" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded">Go Back</button>
            <button id="modal-confirm-btn" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded">Confirm Cancel</button>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('cancel-modal');
    const confirmBtn = document.getElementById('modal-confirm-btn');
    const cancelBtn = document.getElementById('modal-cancel-btn');
    const reasonInput = document.getElementById('cancel-reason-textarea');
    const cancelButtons = document.querySelectorAll('.cancel-btn');
    let activeForm = null;

    cancelButtons.forEach(btn => {
        btn.addEventListener('click', e => {
            e.preventDefault();
            activeForm = btn.closest('form');
            modal.classList.remove('hidden');
            setTimeout(() => reasonInput.focus(), 100);
        });
    });

    function closeModal() {
        reasonInput.value = '';
        modal.classList.add('hidden');
        activeForm = null;
    }

    cancelBtn.addEventListener('click', closeModal);

    confirmBtn.addEventListener('click', async () => {
        try {
            if (!activeForm) return;
            
            const reason = reasonInput.value.trim();
            if (!reason) {
                alert('Please enter a reason for cancellation.');
                return;
            }

            const orderId = activeForm.dataset.orderId;
            const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]').value;

            // Update the hidden input in the form
            const hiddenReasonInput = activeForm.querySelector('.cancel-reason-input');
            hiddenReasonInput.value = reason;

            // Use the form's built-in data with the updated reason
            const formData = new FormData(activeForm);

            const response = await fetch(activeForm.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                },
                credentials: 'same-origin'
            });

            if (!response.ok) {
                throw new Error(`Server returned ${response.status}: ${response.statusText}`);
            }

            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('Server did not return JSON');
            }

            const data = await response.json();
            
            if (data.status === 'success') {
                const statusCell = document.getElementById(`status-${orderId}`);
                if (statusCell) {
                    statusCell.innerHTML = `Cancelled<br><small class="text-gray-600 italic">Reason: ${escapeHtml(reason)}</small>`;
                    statusCell.className = 'px-4 py-3 border text-center font-semibold bg-red-100 text-red-700';
                }
                closeModal();
                location.reload();
            } else {
                throw new Error(data.message || 'Failed to cancel order');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to process cancellation. Please try again.');
        }
    });

    modal.addEventListener('click', e => {
        if (e.target === modal) closeModal();
    });

    function escapeHtml(str) {
        return str.replace(/[&<>"']/g, match => ({
            '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;'
        }[match]));
    }
});
</script>
{% endblock %}
